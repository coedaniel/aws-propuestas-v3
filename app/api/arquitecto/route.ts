import { NextRequest, NextResponse } from 'next/server'
import { BedrockRuntimeClient, InvokeModelCommand } from '@aws-sdk/client-bedrock-runtime'

// Configurar cliente de Bedrock
const bedrockClient = new BedrockRuntimeClient({
  region: process.env.AWS_REGION || 'us-east-1',
  credentials: {
    accessKeyId: process.env.AWS_ACCESS_KEY_ID || '',
    secretAccessKey: process.env.AWS_SECRET_ACCESS_KEY || '',
  }
})

// Prompt maestro para el arquitecto
const ARQUITECTO_PROMPT = `Eres un Arquitecto AWS experto especializado en crear propuestas arquitect√≥nicas profesionales. Tu objetivo es ayudar a los usuarios a dise√±ar soluciones AWS completas y generar documentaci√≥n t√©cnica.

FLUJO DE TRABAJO:
1. Primero solicita SOLO el nombre del proyecto
2. Luego pregunta por el tipo de soluci√≥n (b√°sica, est√°ndar, premium)
3. Despu√©s recopila los requisitos t√©cnicos
4. Finalmente generas la propuesta completa

CAPACIDADES:
- Dise√±o de arquitecturas AWS siguiendo Well-Architected Framework
- Recomendaciones de servicios espec√≠ficos
- Estimaci√≥n de costos
- Mejores pr√°cticas de seguridad
- Documentaci√≥n t√©cnica profesional

Responde de manera profesional, t√©cnica y estructurada. Siempre enf√≥cate en soluciones pr√°cticas y escalables.`

export async function POST(request: NextRequest) {
  try {
    const body = await request.json()
    const { message, conversationHistory, selectedModel, projectData } = body

    const modelToUse = selectedModel || 'amazon.nova-pro-v1:0'
    let response = ''
    
    try {
      // Preparar mensajes para Bedrock
      const messages = [
        { role: 'system', content: ARQUITECTO_PROMPT },
        ...(conversationHistory || []),
        { role: 'user', content: message || '' }
      ]

      const command = new InvokeModelCommand({
        modelId: modelToUse,
        body: JSON.stringify({
          messages: messages,
          max_tokens: 3000,
          temperature: 0.7,
          anthropic_version: "bedrock-2023-05-31"
        }),
        contentType: 'application/json',
        accept: 'application/json'
      })

      const bedrockResponse = await bedrockClient.send(command)
      const responseBody = JSON.parse(new TextDecoder().decode(bedrockResponse.body))
      
      if (responseBody.content && responseBody.content[0] && responseBody.content[0].text) {
        response = responseBody.content[0].text
      } else if (responseBody.completion) {
        response = responseBody.completion
      } else {
        throw new Error('Formato de respuesta inesperado de Bedrock')
      }
      
    } catch (bedrockError) {
      console.error('Error con Bedrock, usando respuesta de fallback:', bedrockError)
      
      // Respuesta de fallback inteligente del arquitecto
      if (!message || message.trim() === '') {
        response = `¬°Hola! Soy tu Arquitecto AWS especializado. 

Para comenzar con tu propuesta arquitect√≥nica, necesito que me proporciones √∫nicamente el **nombre del proyecto**.

Por ejemplo:
- "E-commerce Platform"
- "Sistema de Inventario" 
- "Portal de Clientes"
- "API de Pagos"

¬øCu√°l es el nombre de tu proyecto?`
      } else if (message.toLowerCase().includes('proyecto') || message.toLowerCase().includes('sistema') || message.toLowerCase().includes('aplicacion')) {
        response = `Perfecto, he registrado el proyecto: **${message}**

Ahora necesito conocer el tipo de soluci√≥n que necesitas:

üîπ **B√°sica**: Arquitectura simple, pocos servicios, ideal para MVPs
üîπ **Est√°ndar**: Arquitectura robusta con alta disponibilidad y escalabilidad
üîπ **Premium**: Arquitectura empresarial completa con todos los servicios

¬øQu√© tipo de soluci√≥n prefieres para tu proyecto?`
      } else {
        response = `Como Arquitecto AWS, he analizado tu consulta: "${message}".

Bas√°ndome en mi experiencia, te recomiendo la siguiente arquitectura:

## üèóÔ∏è Arquitectura Recomendada

### Servicios Principales:
1. **Compute**: AWS Lambda para procesamiento serverless
2. **Base de datos**: Amazon DynamoDB para almacenamiento NoSQL escalable  
3. **API**: Amazon API Gateway para exponer servicios REST
4. **Frontend**: AWS Amplify para hosting y CI/CD
5. **Seguridad**: Amazon Cognito para autenticaci√≥n

### Beneficios:
- ‚úÖ Escalabilidad autom√°tica
- ‚úÖ Alta disponibilidad
- ‚úÖ Costos optimizados (pay-per-use)
- ‚úÖ Seguridad integrada
- ‚úÖ Mantenimiento m√≠nimo

### Pr√≥ximos Pasos:
1. Definir requisitos espec√≠ficos
2. Crear diagrama de arquitectura
3. Estimar costos detallados
4. Generar documentaci√≥n t√©cnica

¬øTe gustar√≠a que profundice en alg√∫n aspecto espec√≠fico de esta arquitectura?`
      }
    }

    const apiResponse = {
      response,
      selectedModel: modelToUse,
      mcpServicesUsed: [],
      transparency: {
        message: 'Usando Bedrock Runtime directamente para an√°lisis de arquitectura',
        services: ['bedrock']
      },
      promptUnderstanding: {
        intent: 'arquitectura_aws',
        confidence: 0.9
      },
      projectInfo: projectData || null,
      documentsGenerated: false,
      s3Folder: null,
      usage: {
        inputTokens: message?.length || 0,
        outputTokens: response.length,
        totalTokens: (message?.length || 0) + response.length
      }
    }

    return NextResponse.json(apiResponse)
  } catch (error) {
    console.error('Error in arquitecto API:', error)
    return NextResponse.json(
      { error: 'Error interno del servidor' },
      { status: 500 }
    )
  }
}
