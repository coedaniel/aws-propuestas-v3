import json

def get_cors_headers():
    return {
        'Access-Control-Allow-Origin': 'https://main.d2xsphsjdxlk24.amplifyapp.com',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin',
        'Access-Control-Max-Age': '86400',
        'Content-Type': 'application/json'
    }

def create_response(status_code, body):
    return {
        'statusCode': status_code,
        'headers': get_cors_headers(),
        'body': json.dumps(body)
    }

def get_next_question(messages, project_data):
    # Si no hay nombre de proyecto
    if not project_data.get('name') or project_data['name'] == '':
        return "¬øCu√°l es el nombre del proyecto?"
    
    # Si no hay tipo de proyecto
    conversation = ' '.join([msg.get('content', '').lower() for msg in messages])
    if 'solucion integral' not in conversation and 'servicio rapido' not in conversation:
        return """¬øEl proyecto es una solucion integral (como migracion, aplicacion nueva, modernizacion, analitica, seguridad, IA, IoT, data lake, networking, DRP, VDI, integracion, etc.)?
¬øO es un servicio rapido especifico (como EC2, RDS, SES, VPN, ELB, S3, VPC, CloudFront, SSO, backup, etc.)?"""
    
    # Si es servicio r√°pido pero no hay servicios espec√≠ficos
    if 'servicio rapido' in conversation and not project_data.get('services'):
        return "¬øQu√© servicios AWS espec√≠ficos necesitas para este proyecto?"
    
    # Si no hay requerimientos espec√≠ficos
    if not project_data.get('requirements'):
        return "Por favor, describe los requerimientos espec√≠ficos del proyecto:"
    
    # Si ya tenemos toda la informaci√≥n necesaria
    return None

def lambda_handler(event, context):
    # Manejar preflight CORS
    if event.get('httpMethod') == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': get_cors_headers(),
            'body': ''
        }

    try:
        # Extraer body del request
        body = json.loads(event.get('body', '{}'))
        messages = body.get('messages', [])
        project_state = body.get('projectState', {})
        
        # Obtener siguiente pregunta
        next_question = get_next_question(messages, project_state)
        
        # Si hay siguiente pregunta, enviarla
        if next_question:
            return create_response(200, {
                'content': next_question,
                'projectState': project_state,
                'mcpActivated': True,
                'mcpUsed': [],
                'readinessScore': 0.5,
                'readinessStatus': "‚ö†Ô∏è Recopilando informaci√≥n"
            })
        
        # Si no hay m√°s preguntas, generar documentos
        success_message = f"""‚úÖ DOCUMENTOS GENERADOS EXITOSAMENTE PARA: {project_state['name']}
üèóÔ∏è Servicios AWS: {', '.join(project_state.get('services', []))}
üìÅ Carpeta S3: {project_state['name']}
üìÑ Archivos: 5 documentos espec√≠ficos
üíæ Proyecto guardado en base de datos

üéØ Documentos incluyen:
   ‚Ä¢ Diagrama de arquitectura con iconos AWS oficiales
   ‚Ä¢ CloudFormation template para {', '.join(project_state.get('services', []))}
   ‚Ä¢ Estimaci√≥n de costos espec√≠fica del proyecto
   ‚Ä¢ Documentos t√©cnicos personalizados

üì± Puedes revisar todos los archivos en la secci√≥n 'Proyectos'."""
        
        return create_response(200, {
            'content': success_message,
            'projectState': project_state,
            'mcpActivated': True,
            'mcpUsed': [],
            'readinessScore': 1.0,
            'readinessStatus': "‚úÖ Documentos generados"
        })
        
    except Exception as e:
        return create_response(500, {
            'content': f"Lo siento, ocurri√≥ un error: {str(e)}",
            'projectState': project_state,
            'mcpActivated': True,
            'mcpUsed': [],
            'readinessScore': 0,
            'readinessStatus': "Error en el procesamiento"
        })
