import json
import boto3
import logging
from datetime import datetime
import uuid
import os
from mcp_integration import generate_diagram, generate_cloudformation, generate_costs

# Configuraci√≥n de logging
logger = logging.getLogger()
logger.setLevel(logging.INFO)

# Inicializar servicios AWS
dynamodb = boto3.resource('dynamodb')
s3 = boto3.client('s3')
bedrock = boto3.client('bedrock-runtime')

# Configuraci√≥n de modelos
MODELS = {
    'nova-pro': {
        'id': 'amazon.nova-pro-v1:0',
        'temp': 0.7,
        'top_p': 0.9
    },
    'claude': {
        'id': 'anthropic.claude-3.5-sonnet-v1',
        'temp': 0.7,
        'top_p': 0.9
    }
}

def get_cors_headers():
    return {
        'Access-Control-Allow-Origin': 'https://main.d2xsphsjdxlk24.amplifyapp.com',
        'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',
        'Access-Control-Allow-Headers': 'Content-Type, Authorization, X-Requested-With, Accept, Origin',
        'Access-Control-Max-Age': '86400',
        'Content-Type': 'application/json'
    }

def create_response(status_code, body):
    return {
        'statusCode': status_code,
        'headers': get_cors_headers(),
        'body': json.dumps(body)
    }

def validate_project_state(project_state):
    """Validaci√≥n exhaustiva del estado del proyecto"""
    required_fields = ['name', 'services', 'requirements']
    for field in required_fields:
        if field not in project_state:
            project_state[field] = []
    return project_state

def analyze_conversation(messages):
    """An√°lisis profundo de la conversaci√≥n usando Bedrock"""
    try:
        # Preparar el prompt para an√°lisis
        conversation_text = "\n".join([f"{msg['role']}: {msg['content']}" for msg in messages])
        prompt = f"""Analiza esta conversaci√≥n y extrae:
1. Nombre del proyecto
2. Tipo de proyecto (integral/r√°pido)
3. Servicios AWS mencionados
4. Requerimientos espec√≠ficos
5. Estado actual de la conversaci√≥n
6. Siguiente paso recomendado

Conversaci√≥n:
{conversation_text}

Responde en formato JSON."""

        # Llamar a Bedrock con Claude para an√°lisis
        response = bedrock.invoke_model(
            modelId=MODELS['claude']['id'],
            body=json.dumps({
                'prompt': prompt,
                'temperature': MODELS['claude']['temp'],
                'top_p': MODELS['claude']['top_p']
            })
        )
        
        analysis = json.loads(response['body'].read())
        logger.info(f"An√°lisis de conversaci√≥n: {analysis}")
        return analysis
        
    except Exception as e:
        logger.error(f"Error en an√°lisis de conversaci√≥n: {str(e)}")
        return None

def generate_documents(project_data):
    """Generaci√≥n de documentos usando MCPs"""
    try:
        documents = []
        mcp_used = []
        
        # 1. Generar diagrama
        diagram = generate_diagram(project_data)
        if diagram:
            documents.append(diagram)
            mcp_used.append('generate_diagram')
        
        # 2. Generar CloudFormation
        cloudformation = generate_cloudformation(project_data)
        if cloudformation:
            documents.append(cloudformation)
            mcp_used.append('generate_cloudformation')
        
        # 3. Generar costos
        costs = generate_costs(project_data)
        if costs:
            documents.append(costs)
            mcp_used.append('generate_costs')
        
        # Guardar documentos en S3
        bucket_name = os.environ['DOCUMENTS_BUCKET']
        for doc in documents:
            if 'content' in doc:
                s3.put_object(
                    Bucket=bucket_name,
                    Key=doc['url'],
                    Body=doc['content'].encode('utf-8')
                )
        
        # Guardar proyecto en DynamoDB
        table = dynamodb.Table(os.environ['PROJECTS_TABLE'])
        project_id = str(uuid.uuid4())
        
        table.put_item(Item={
            'projectId': project_id,
            'name': project_data['name'],
            'createdAt': int(datetime.utcnow().timestamp()),
            'services': project_data.get('services', []),
            'requirements': project_data.get('requirements', []),
            'documentsGenerated': documents,
            'status': 'COMPLETED'
        })
        
        return {
            'documents': documents,
            'mcp_used': mcp_used
        }
        
    except Exception as e:
        logger.error(f"Error generando documentos: {str(e)}")
        return None

def get_next_question(analysis):
    """Determinar siguiente pregunta basada en el an√°lisis de Bedrock"""
    try:
        if not analysis.get('project_name'):
            return "¬øCu√°l es el nombre del proyecto?"
            
        if not analysis.get('project_type'):
            return """¬øEl proyecto es una solucion integral (como migracion, aplicacion nueva, modernizacion, analitica, seguridad, IA, IoT, data lake, networking, DRP, VDI, integracion, etc.)?
¬øO es un servicio rapido especifico (como EC2, RDS, SES, VPN, ELB, S3, VPC, CloudFront, SSO, backup, etc.)?"""
            
        if not analysis.get('services'):
            return "¬øQu√© servicios AWS espec√≠ficos necesitas para este proyecto?"
            
        if not analysis.get('requirements'):
            if 'servicio rapido' in analysis.get('project_type', '').lower():
                services = ', '.join(analysis.get('services', []))
                return f"Para implementar {services}, necesito saber los requerimientos espec√≠ficos:"
            else:
                return """Para dise√±ar la soluci√≥n integral, necesito saber:
- ¬øCu√°les son los objetivos principales del proyecto?
- ¬øQu√© sistemas o aplicaciones est√°n involucrados?
- ¬øTienes requisitos espec√≠ficos de rendimiento o escalabilidad?
- ¬øHay consideraciones especiales de seguridad o cumplimiento?"""
        
        return None
        
    except Exception as e:
        logger.error(f"Error obteniendo siguiente pregunta: {str(e)}")
        return "¬øPodr√≠as proporcionar m√°s detalles sobre el proyecto?"

def lambda_handler(event, context):
    """Handler principal mejorado"""
    
    # Manejar preflight CORS
    if event.get('httpMethod') == 'OPTIONS':
        return {
            'statusCode': 200,
            'headers': get_cors_headers(),
            'body': ''
        }

    try:
        # Extraer y validar datos
        body = json.loads(event.get('body', '{}'))
        messages = body.get('messages', [])
        project_state = validate_project_state(body.get('projectState', {}))
        
        # Analizar conversaci√≥n con Bedrock
        analysis = analyze_conversation(messages)
        
        # Obtener siguiente pregunta o generar documentos
        next_question = get_next_question(analysis) if analysis else None
        
        if next_question:
            return create_response(200, {
                'content': next_question,
                'projectState': project_state,
                'mcpActivated': True,
                'mcpUsed': [],
                'readinessScore': 0.5,
                'readinessStatus': "‚ö†Ô∏è Recopilando informaci√≥n",
                'analysis': analysis
            })
        
        # Generar documentos
        generation_result = generate_documents(project_state)
        
        if not generation_result:
            raise Exception("Error generando documentos")
        
        success_message = f"""‚úÖ DOCUMENTOS GENERADOS EXITOSAMENTE PARA: {project_state['name']}
üèóÔ∏è Servicios AWS: {', '.join(project_state.get('services', []))}
üìÅ Carpeta S3: {project_state['name']}
üìÑ Archivos: {len(generation_result['documents'])} documentos espec√≠ficos
üíæ Proyecto guardado en base de datos

üéØ Documentos incluyen:
   ‚Ä¢ Diagrama de arquitectura con iconos AWS oficiales
   ‚Ä¢ CloudFormation template para {', '.join(project_state.get('services', []))}
   ‚Ä¢ Estimaci√≥n de costos espec√≠fica del proyecto

üì± Puedes revisar todos los archivos en la secci√≥n 'Proyectos'."""
        
        return create_response(200, {
            'content': success_message,
            'projectState': project_state,
            'mcpActivated': True,
            'mcpUsed': generation_result['mcp_used'],
            'readinessScore': 1.0,
            'readinessStatus': "‚úÖ Documentos generados",
            'analysis': analysis
        })
        
    except Exception as e:
        logger.error(f"Error: {str(e)}")
        return create_response(500, {
            'content': f"Lo siento, ocurri√≥ un error: {str(e)}",
            'projectState': project_state,
            'mcpActivated': True,
            'mcpUsed': [],
            'readinessScore': 0,
            'readinessStatus': "Error en el procesamiento"
        })
