AWSTemplateFormatVersion: '2010-09-09'
Transform: AWS::Serverless-2016-10-31
Description: AWS Propuestas V3 - Professional AWS Solutions Architect System

Globals:
  Function:
    Timeout: 900
    MemorySize: 1024
    Runtime: python3.9
    Environment:
      Variables:
        CORS_ORIGIN: "*"
        POWERTOOLS_SERVICE_NAME: aws-propuestas
        POWERTOOLS_LOG_LEVEL: INFO

Parameters:
  Environment:
    Type: String
    Default: prod
    AllowedValues: [dev, staging, prod]
    Description: Environment name

Resources:
  # ============================================================================
  # MAIN ARCHITECT FUNCTION - Implements the Master Prompt
  # ============================================================================
  
  ArchitectFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "aws-propuestas-architect-${Environment}"
      CodeUri: lambda/architect/
      Handler: main.lambda_handler
      Description: "AWS Solutions Architect - Master Prompt Implementation"
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
          NOVA_AGENT_ID: "WUGHP2HGH9"
          NOVA_AGENT_ALIAS_ID: "ZNZ3SYTP5L"
          CLAUDE_AGENT_ID: "W3YRJXXIRE"
          CLAUDE_AGENT_ALIAS_ID: "ULPAGJS0VW"
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - bedrock:InvokeAgent
                - bedrock:InvokeModel
                - bedrock:ListFoundationModels
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:DeleteObject
                - s3:ListBucket
              Resource: 
                - !Sub "${DocumentsBucket}/*"
                - !GetAtt DocumentsBucket.Arn
            - Effect: Allow
              Action:
                - logs:CreateLogGroup
                - logs:CreateLogStream
                - logs:PutLogEvents
              Resource: "*"
      Events:
        ApiEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /architect
            Method: post
        OptionsEvent:
          Type: Api
          Properties:
            RestApiId: !Ref ApiGateway
            Path: /architect
            Method: options

  # ============================================================================
  # MCP SERVER FUNCTIONS - Real Implementation
  # ============================================================================

  # Document Generation MCP Server
  DocumentGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "aws-propuestas-doc-generator-${Environment}"
      CodeUri: lambda/mcp_servers/document_generator/
      Handler: handler.lambda_handler
      Description: "MCP Server - Professional Document Generation"
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Sub "${DocumentsBucket}/*"

  # Diagram Generation MCP Server
  DiagramGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "aws-propuestas-diagram-generator-${Environment}"
      CodeUri: lambda/mcp_servers/diagram_generator/
      Handler: handler.lambda_handler
      Description: "MCP Server - AWS Architecture Diagrams"
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Sub "${DocumentsBucket}/*"

  # CloudFormation Template Generator MCP Server
  CloudFormationGeneratorFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "aws-propuestas-cfn-generator-${Environment}"
      CodeUri: lambda/mcp_servers/cloudformation_generator/
      Handler: handler.lambda_handler
      Description: "MCP Server - CloudFormation Templates"
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Sub "${DocumentsBucket}/*"

  # Cost Analysis MCP Server
  CostAnalysisFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "aws-propuestas-cost-analysis-${Environment}"
      CodeUri: lambda/mcp_servers/cost_analysis/
      Handler: handler.lambda_handler
      Description: "MCP Server - AWS Cost Analysis"
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - pricing:GetProducts
                - pricing:DescribeServices
              Resource: "*"
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
              Resource: !Sub "${DocumentsBucket}/*"

  # S3 Upload Manager MCP Server
  S3UploadFunction:
    Type: AWS::Serverless::Function
    Properties:
      FunctionName: !Sub "aws-propuestas-s3-upload-${Environment}"
      CodeUri: lambda/mcp_servers/s3_upload/
      Handler: handler.lambda_handler
      Description: "MCP Server - S3 Document Upload Manager"
      Environment:
        Variables:
          ENVIRONMENT: !Ref Environment
          DOCUMENTS_BUCKET: !Ref DocumentsBucket
      Policies:
        - Version: '2012-10-17'
          Statement:
            - Effect: Allow
              Action:
                - s3:PutObject
                - s3:GetObject
                - s3:ListBucket
                - s3:DeleteObject
              Resource: 
                - !Sub "${DocumentsBucket}/*"
                - !GetAtt DocumentsBucket.Arn

  # ============================================================================
  # API GATEWAY
  # ============================================================================
  
  ApiGateway:
    Type: AWS::Serverless::Api
    Properties:
      Name: !Sub "aws-propuestas-api-${Environment}"
      StageName: !Ref Environment
      Description: "AWS Propuestas V3 - Professional Solutions Architect API"
      Cors:
        AllowMethods: "'GET,POST,OPTIONS'"
        AllowHeaders: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
        AllowOrigin: "'*'"
        MaxAge: "'600'"
      GatewayResponses:
        DEFAULT_4XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"
        DEFAULT_5XX:
          ResponseParameters:
            Headers:
              Access-Control-Allow-Origin: "'*'"
              Access-Control-Allow-Headers: "'Content-Type,X-Amz-Date,Authorization,X-Api-Key,X-Amz-Security-Token'"
              Access-Control-Allow-Methods: "'GET,POST,OPTIONS'"

  # ============================================================================
  # S3 BUCKET FOR DOCUMENTS
  # ============================================================================
  
  DocumentsBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "aws-propuestas-documents-${Environment}-${AWS::AccountId}"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: false
        BlockPublicPolicy: false
        IgnorePublicAcls: false
        RestrictPublicBuckets: false
      CorsConfiguration:
        CorsRules:
          - AllowedHeaders: ['*']
            AllowedMethods: [GET, PUT, POST, DELETE, HEAD]
            AllowedOrigins: ['*']
            MaxAge: 3000
      LifecycleConfiguration:
        Rules:
          - Id: DeleteOldDocuments
            Status: Enabled
            ExpirationInDays: 30
            NoncurrentVersionExpirationInDays: 7

  DocumentsBucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref DocumentsBucket
      PolicyDocument:
        Statement:
          - Sid: PublicReadGetObject
            Effect: Allow
            Principal: '*'
            Action: s3:GetObject
            Resource: !Sub "${DocumentsBucket}/*"

# ============================================================================
# OUTPUTS
# ============================================================================

Outputs:
  ApiGatewayUrl:
    Description: "URL del API Gateway"
    Value: !Sub "https://${ApiGateway}.execute-api.${AWS::Region}.amazonaws.com/${Environment}"
    Export:
      Name: !Sub "${AWS::StackName}-ApiUrl"

  ArchitectFunctionArn:
    Description: "ARN de la función Lambda principal"
    Value: !GetAtt ArchitectFunction.Arn
    Export:
      Name: !Sub "${AWS::StackName}-ArchitectFunctionArn"

  DocumentsBucketName:
    Description: "Nombre del bucket S3 para documentos"
    Value: !Ref DocumentsBucket
    Export:
      Name: !Sub "${AWS::StackName}-DocumentsBucket"

  DocumentsBucketUrl:
    Description: "URL del bucket S3 para documentos"
    Value: !Sub "https://${DocumentsBucket}.s3.${AWS::Region}.amazonaws.com"
    Export:
      Name: !Sub "${AWS::StackName}-DocumentsBucketUrl"

  # Información de los agentes Bedrock
  NovaProAgentInfo:
    Description: "Nova Pro Agent Configuration"
    Value: !Sub "ID: WUGHP2HGH9, Alias: ZNZ3SYTP5L, Model: amazon.nova-pro-v1:0"
    Export:
      Name: !Sub "${AWS::StackName}-NovaProAgent"

  ClaudeAgentInfo:
    Description: "Claude 3.5 Sonnet Agent Configuration"
    Value: !Sub "ID: W3YRJXXIRE, Alias: ULPAGJS0VW, Model: anthropic.claude-3-5-sonnet-20240620-v1:0"
    Export:
      Name: !Sub "${AWS::StackName}-ClaudeAgent"
